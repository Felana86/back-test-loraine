// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

/////// USERS GROUP ...
model GroupUser {
  userId    Int
  groupId   Int
  role      Role     @default(MEMBER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  Group     Group    @relation(fields: [groupId], references: [id])

  @@id([userId, groupId])
}

model User {
  id             Int           @id @default(autoincrement())
  email          String        @unique
  password       String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  lastConnection DateTime      @default(now())
  GroupUser      GroupUser[]
  Event          Event[]
  Post           Post[]
  PostUser       PostUser[]
  Flag           Flag[]
  Vote           Vote[]
  Participant    Participant[]
  Survey         Survey[]
  Service        Service[]     @relation("Service")
  ServiceResp    Service[]     @relation("ServiceResp")
  IssueModo      Issue[]       @relation("Modo")
  IssueModoResp  Issue[]       @relation("ModoResp")
  Issue          Issue[]       @relation("Issue")
  Pool           Pool[]        @relation("Pool")
  Benef          Pool[]        @relation("PoolBenef")
  User           Profile[]     @relation("Profile")
  UserSp         Profile[]     @relation("Sponsor")
}

model Group {
  id        Int         @id @default(autoincrement())
  addressId Int
  area      Int
  rules     String
  name      String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  Address   Address     @relation(fields: [addressId], references: [id])
  GroupUser GroupUser[]
}

model Address {
  id        Int       @id @default(autoincrement())
  zipcode   String
  city      String
  address   String
  lat       Decimal
  lng       Decimal
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  Group     Group[]
  Profile   Profile[]
  Event     Event[]
}

model Profile {
  id            Int        @id @default(autoincrement())
  userId        Int
  userIdSp      Int
  addressId     Int
  firstName     String
  lastName      String
  avatar        String
  phone         String
  addressShared Boolean    @default(false)
  assistance    Assistance @default(NONE)
  points        Int
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  Address       Address    @relation(fields: [addressId], references: [id])
  User          User       @relation(fields: [userId], references: [id], name: "Profile")
  UserSp        User       @relation(fields: [userIdSp], references: [id], name: "Sponsor")
}

enum Assistance {
  NONE
  LOW
  MEDIUM
  HIGH
}

enum Role {
  MEMBER
  GUEST
}

/////// EVENTS // EventCategory
model Event {
  id              Int           @id @default(autoincrement())
  userId          Int
  addressId       Int
  start           DateTime
  end             DateTime
  title           String
  description     String
  category        String
  participantsMin Int
  image           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  User            User          @relation(fields: [userId], references: [id])
  Address         Address       @relation(fields: [addressId], references: [id])
  Participant     Participant[]
  Flag            Flag[]        @relation(name: "flagEvent")
}

enum EventCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

model Participant {
  userId    Int
  eventId   Int
  User      User     @relation(fields: [userId], references: [id])
  Event     Event    @relation(fields: [eventId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([userId, eventId])
}

////// SERVICE 
model Service {
  id              Int             @id @default(autoincrement())
  userId          Int
  UserService     User            @relation(fields: [userId], references: [id], name: "Service")
  userIdResp      Int?
  UserServiceResp User?           @relation(fields: [userIdResp], references: [id], name: "ServiceResp")
  type            ServiceType
  title           String
  description     String
  category        ServiceCategory
  skill           SkillLevel
  hard            HardLevel
  status          ServiceStatus
  image           String?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  Issue           Issue[]
}

enum ServiceType {
  GET
  DO
}

enum ServiceStatus {
  POST
  RESP
  VALIDATE
  FINISH
  ISSUE
}

enum ServiceCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
}

enum SkillLevel {
  SKILL_0
  SKILL_1
  SKILL_2
  SKILL_3
}

enum HardLevel {
  HARD_0
  HARD_1
  HARD_2
  HARD_3
}

model Issue {
  id              Int         @id @default(autoincrement())
  serviceId       Int
  description     String
  date            DateTime
  status          IssueStatus
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
  userId_Modo     Int
  userId_ModoResp Int
  UserModo        User        @relation(fields: [userId_Modo], references: [id], name: "Modo")
  UserModoResp    User        @relation(fields: [userId_ModoResp], references: [id], name: "ModoResp")
  Service         Service     @relation(fields: [serviceId], references: [id])
  User            User        @relation(fields: [userId], references: [id], name: "Issue")
  userId          Int
}

enum IssueStatus {
  SOLVED
  PENDING
}

///// SURVEY POOL 
model Survey {
  id          Int            @id @default(autoincrement())
  userId      Int
  title       String
  description String
  category    SurveyCategory
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  User        User           @relation(fields: [userId], references: [id])
  Vote        Vote[]
  Flag        Flag[]         @relation(name: "flagSurvey")
}

enum SurveyCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
}

model Pool {
  id          Int      @id @default(autoincrement())
  userId      Int
  userIdBenef Int
  title       String
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  UserAuthor  User     @relation(fields: [userId], references: [id], name: "Pool")
  UserBenef   User     @relation(fields: [userIdBenef], references: [id], name: "PoolBenef")
  Vote        Vote[]
}

model Vote {
  userId    Int
  targetId  Int
  target    VoteTarget
  opinion   VoteOpinion
  User      User        @relation(fields: [userId], references: [id])
  Survey    Survey?     @relation(fields: [surveyId], references: [id])
  surveyId  Int?
  Pool      Pool?       @relation(fields: [poolId], references: [id])
  poolId    Int?
  updatedAt DateTime    @updatedAt

  @@id([userId, targetId])
}

enum VoteTarget {
  SURVEY
  POOL
}

enum VoteOpinion {
  OK
  NO
  WO
}

///// POST 
model Post {
  id          Int          @id @default(autoincrement())
  userId      Int
  title       String
  description String
  category    PostCategory
  image       String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  User        User         @relation(fields: [userId], references: [id])
  PostUser    PostUser[]
  Flag        Flag[]       @relation(name: "flagPost")
}

enum PostCategory {
  CATEGORY_1
  CATEGORY_2
  CATEGORY_3
  CATEGORY_4
  CATEGORY_5
}

model PostUser {
  userId    Int
  postId    Int
  User      User     @relation(fields: [userId], references: [id])
  Post      Post     @relation(fields: [postId], references: [id])
  updatedAt DateTime @updatedAt

  @@id([userId, postId])
}

///// FLAG 

model Flag {
  targetId  Int
  userId    Int
  target    FlagTarget
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  User      User       @relation(fields: [userId], references: [id])
  Event     Event      @relation(fields: [eventId], references: [id], name: "flagEvent")
  Post      Post       @relation(fields: [postId], references: [id], name: "flagPost")
  Survey    Survey     @relation(fields: [surveyId], references: [id], name: "flagSurvey")
  eventId   Int
  postId    Int
  surveyId  Int

  @@id([userId, targetId])
}

enum FlagTarget {
  EVENT
  POST
  SURVEY
}
